// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum UserStatus {
  TRUSTED
  BLACKLISTED
  UNKNOWN
}

enum ProofType {
  VIDEO
  IMAGE
  FILE
}

// Représente un compte utilisateur qui a été enregistré sur le site
model Account {
  id     String @id @default(uuid())
  email  String @unique
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Account_user_relation")

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
}

// Représente les informations du blacklist
model Blacklist {
  id             String    @id @default(uuid())
  userId         String
  user           User      @relation("UserBlacklist", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Blacklist_user_relation")
  title          String    @db.VarChar(255)
  description    String    @db.Text
  proofs         Proof[]   @relation("BlacklistProofs")
  createdAt      DateTime  @default(now()) @db.Timestamp(3)
  blacklistUntil DateTime?
  updatedAt      DateTime  @updatedAt @db.Timestamp(3)
  isFinalized    Boolean   @default(false)

  votes ModeratorVote[]
}

// Représente les votes des modérateurs pour un blacklist
model ModeratorVote {
  id          String    @id @default(uuid())
  blacklistId String
  blacklist   Blacklist @relation(fields: [blacklistId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  moderatorId String
  moderator   User      @relation(fields: [moderatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vote        Boolean
  createdAt   DateTime  @default(now()) @db.Timestamp(3)
  updatedAt   DateTime  @updatedAt @db.Timestamp(3)
}

// Représente un utilisateur présent sur un serveur Discord qui peut être blacklisté
model User {
  id        String   @id @default(uuid())
  discordId String   @unique
  account   Account?
  imageUrl  String

  displayName String
  username    String

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  Blacklist Blacklist[]     @relation("UserBlacklist")
  votes     ModeratorVote[]
}

// Représente les preuves de blacklist
model Proof {
  id          String    @id @default(uuid())
  isPublic    Boolean   @default(false)
  type        ProofType
  url         String
  blacklistId String
  blacklist   Blacklist @relation("BlacklistProofs", fields: [blacklistId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Proof_blacklist_relation")
  createdAt   DateTime  @default(now()) @db.Timestamp(3)
  updatedAt   DateTime  @updatedAt @db.Timestamp(3)
}
