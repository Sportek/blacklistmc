// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum ProofType {
  VIDEO
  IMAGE
  FILE
}

enum BlacklistStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BlacklistVoteState {
  PENDING
  EVIDENCE
  BLACKLIST
}

enum AccountRole {
  UNKNOWN
  USER
  SUPPORT
  SUPERVISOR
  ADMIN
}

// Représente un compte utilisateur qui a été enregistré sur le site
model Account {
  id     String @id @default(uuid())
  email  String @unique
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Account_user_relation")

  role AccountRole @default(USER)

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
}

model Reason {
  id        String   @id @default(uuid())
  name      String
  blacklists Blacklist[]
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
}


// Représente les informations du blacklist
model Blacklist {
  id     Int    @id @default(autoincrement())
  userId String // Id de l'utilisateur qui est blacklisté
  user   User   @relation("UserBlacklist", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Blacklist_user_relation")

  askedByUserId String // Id de l'utilisateur qui a ouvert le blacklist
  askedByUser   User   @relation("Blacklist_askedBy_relation", fields: [askedByUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  title       String?         @db.VarChar(255)
  description String?         @db.Text
  reasonId    String?
  reason      Reason?         @relation(fields: [reasonId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  proofs      Proof[]         @relation("BlacklistProofs")
  createdAt   DateTime        @default(now()) @db.Timestamp(3)
  expireAt    DateTime?
  updatedAt   DateTime        @updatedAt @db.Timestamp(3)
  status      BlacklistStatus @default(PENDING)
  channelId   String?

  voteEndAt DateTime?
  voteState BlacklistVoteState @default(PENDING)
  votes     ModeratorVote[]
}

// Représente les votes des modérateurs pour un blacklist
model ModeratorVote {
  id          String             @id @default(uuid())
  voteState   BlacklistVoteState @default(PENDING)
  blacklistId Int
  blacklist   Blacklist          @relation(fields: [blacklistId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  moderatorId String
  moderator   User               @relation(fields: [moderatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vote        Boolean
  createdAt   DateTime           @default(now()) @db.Timestamp(3)
  updatedAt   DateTime           @updatedAt @db.Timestamp(3)
}

model UserGroup {
  id        String   @id @default(uuid())
  users     User[]   @relation("UserGroupRelation")
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
}

// Représente un utilisateur présent sur un serveur Discord qui peut être blacklisté
model User {
  id       String   @id
  account  Account?
  imageUrl String

  imageTag String // Id de l'image envoyé par discord

  displayName String
  username    String

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  Blacklist       Blacklist[]     @relation("UserBlacklist")
  votes           ModeratorVote[]
  UserHistory     UserHistory[]
  askedBlacklists Blacklist[]     @relation("Blacklist_askedBy_relation")

  groupId String?
  group   UserGroup? @relation("UserGroupRelation", fields: [groupId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model UserHistory {
  id          String   @id @default(uuid())
  userId      String
  imageUrl    String
  displayName String
  username    String
  createdAt   DateTime @default(now()) @db.Timestamp(3)
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "UserHistory_user_relation")
}

// Représente les preuves de blacklist
model Proof {
  id          String    @id @default(uuid())
  name        String
  extension   String
  isPublic    Boolean   @default(false)
  type        ProofType
  url         String
  blacklistId Int
  blacklist   Blacklist @relation("BlacklistProofs", fields: [blacklistId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Proof_blacklist_relation")
  createdAt   DateTime  @default(now()) @db.Timestamp(3)
  updatedAt   DateTime  @updatedAt @db.Timestamp(3)
}